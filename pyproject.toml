[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "minicast"
version = "1.0.0"
description = "Ultra-Low-Bandwidth Reaction GIF Channel"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Minicast Team", email = "team@minicast.dev"}
]
maintainers = [
    {name = "Minicast Team", email = "team@minicast.dev"}
]
keywords = ["rtsp", "streaming", "gif", "video", "low-bandwidth"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Communications :: Chat",
]
requires-python = ">=3.9"
dependencies = [
    "opencv-python>=4.8.0",
    "numpy>=1.24.0",
    "Pillow>=10.0.0",
    "ffmpeg-python>=0.2.0",
    "av>=10.0.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
    "colorama>=0.4.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
]
web = [
    "Flask>=2.3.0",
    "Flask-CORS>=4.0.0",
]
docker = [
    "docker>=6.1.0",
]

[project.scripts]
minicast-transcode = "transcode:main"
minicast-server = "server:main"

[project.urls]
Homepage = "https://github.com/minicast/minicast"
Documentation = "https://github.com/minicast/minicast#readme"
Repository = "https://github.com/minicast/minicast"
"Bug Tracker" = "https://github.com/minicast/minicast/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["minicast*"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["minicast"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 